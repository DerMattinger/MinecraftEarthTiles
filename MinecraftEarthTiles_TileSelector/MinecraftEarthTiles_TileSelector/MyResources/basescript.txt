for tile in tiles:
    latDir = tile[0:1]
    latNumber = float(tile[1:3])
    longDir = tile[3:4]
    longNumber = float(tile[4:7])

    if latDir == "N":
        yMax = latNumber + 1
    elif latDir == "S":
        yMax = (latNumber - 1) * -1
    else:
        yMax = 0

    yMin = yMax -1

    if longDir == "E":
        xMax = longNumber + 1
    elif longDir == "W":
        xMax = (longNumber - 1) * -1
    else:
        xMax = 0

    xMin = xMax -1
	
	##################################################################################

    #at first, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("background_heightmap"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, True)
    settings.flags = context.flags()

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create missing folders
    folder = path + 'image_exports/'
    if not os.path.exists(folder):
        os.makedirs(folder)
    folder = path + 'image_exports/' + tile + '/'
    if not os.path.exists(folder):
        os.makedirs(folder)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '.png" saved')
    assert ret==0

	##################################################################################

    #at first, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("land_polygons"):
            layers.append(layer)
        elif layer.name().startswith("GEBCO"):
            layers.append(layer)
        elif layer.name().startswith("background_bathymetry"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, True)
    settings.flags = context.flags()

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create missing folders
    folder = path + 'image_exports/'
    if not os.path.exists(folder):
        os.makedirs(folder)
    folder = path + 'image_exports/' + tile + '/'
    if not os.path.exists(folder):
        os.makedirs(folder)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_bathymetry.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_bathymetry.png" saved')
    assert ret==0

	####################################################################################

    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    #save all layers starting with "landuse" into a list
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("landuse"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_landuse.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_landuse.png" saved')
    assert ret==0
    
	####################################################################################
	
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    #save all layers starting with "water" into a list
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("water"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_water.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_water.png" saved')
    assert ret==0

	####################################################################################
	
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    #save all layers starting with "water" into a list
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("wet"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_wet.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_wet.png" saved')
    assert ret==0
    
	####################################################################################
	
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    #save all layers starting with "water" into a list
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("mask"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_water_mask.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_water_mask.png" saved')
    assert ret==0
    
	####################################################################################
    
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    #save all layers starting with "road" into a list
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("road"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_road.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_road.png" saved')
    assert ret==0
    
	####################################################################################
	
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    #save all layers starting with "terrain" into a list
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("globcover"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_terrain.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_terrain.png" saved')
    assert ret==0
    
	####################################################################################
	
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    #save all layers starting with "climate" into a list
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("climate"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_climate.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_climate.png" saved')
    assert ret==0
    
     #at last, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

	####################################################################################
	
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("EvergreenDeciduousNeedleleafTrees"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_pine.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_pine.png" saved')
    assert ret==0
    
     #at last, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

	####################################################################################

    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("DeciduousBroadleafTrees"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_deciduous.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_deciduous.png" saved')
    assert ret==0
    
     #at last, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

	####################################################################################

    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("EvergreenBroadleafTrees"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_jungle.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_jungle.png" saved')
    assert ret==0
    
     #at last, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

	####################################################################################

    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("Shrubs"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_shrubs.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_shrubs.png" saved')
    assert ret==0
    
     #at last, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

	####################################################################################

    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("HerbaceousVegetation"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_herbs.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_herbs.png" saved')
    assert ret==0
    
     #at last, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

	####################################################################################

    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("groundcover"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_groundcover.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_groundcover.png" saved')
    assert ret==0
    
     #at last, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

	####################################################################################

    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("ground_red_sand"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_ground_red_sand.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_ground_red_sand.png" saved')
    assert ret==0
    
     #at last, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

	####################################################################################

    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("ground_gravel"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_ground_gravel.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_ground_gravel.png" saved')
    assert ret==0
    
     #at last, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

	####################################################################################

    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)
    
    layers = []
    for layer in QgsProject.instance().mapLayers().values():
        if layer.name().startswith("border"):
            layers.append(layer)
    
    project = QgsProject().instance()
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    
    #select all pages and change the first one to the right dimension
    pages = layout.pageCollection()
    pages.page(0).setPageSize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    
    #create a map inside the layout
    map = QgsLayoutItemMap(layout)
    map.setRect(0, 0, scale, scale)
    map.setExtent(QgsRectangle(xMin, yMin, xMax, yMax))
    map.attemptMove(QgsLayoutPoint(0,0,QgsUnitTypes.LayoutPixels))
    map.attemptResize(QgsLayoutSize(scale,scale,QgsUnitTypes.LayoutPixels))
    layout.addLayoutItem(map)
    
    #create exporter with settings
    exporter = QgsLayoutExporter(layout)
    settings = QgsLayoutExporter.ImageExportSettings()
    settings.imageSize = (QSize(scale,scale))
    
    #disable Antialiasing
    context = QgsLayoutRenderContext(layout)
    context.setFlag(context.FlagAntialiasing, False)
    settings.flags = context.flags()

    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)

    for layer in layers:
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(Qt.Checked)

    #create image
    ret = exporter.exportToImage(path + 'image_exports/' + tile + '/' + tile + '_border.png', settings)
    print('File: "' + path + 'image_exports/' + tile + '/' + tile + '_border.png" saved')
    assert ret==0
    
     #at last, disable all layers
    alllayers = []
    for alllayer in QgsProject.instance().mapLayers().values():
        alllayers.append(alllayer)
    
    root = QgsProject.instance().layerTreeRoot()
    for alllayer in alllayers:
        node = root.findLayer(alllayer.id())
        node.setItemVisibilityChecked(Qt.Unchecked)


print('Finish!')